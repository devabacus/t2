import 'package:serverpod/serverpod.dart';
import 'package:t2_server/src/generated/protocol.dart';

import 'shared/auth_context_mixin.dart';
import 'user_manager_endpoint.dart';

const _taskTagMapChannelBase = 't2_task_tag_map_events_for_user_';

class TaskTagMapEndpoint extends Endpoint with AuthContextMixin {

  Future<void> _notifyChange(Session session, TaskTagMapSyncEvent event, AuthenticatedUserContext authContext) async {
    final channel = '$_taskTagMapChannelBase${authContext.userId}-${authContext.customerId.uuid}';
    await session.messages.postMessage(channel, event);
    session.log('üîî –°–æ–±—ã—Ç–∏–µ TaskTagMap ${event.type.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª "$channel"');
  }

  Future<void> _validateTaskAndTag(Session session, TaskTagMap model) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Task —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    final task = await Task.db.findFirstRow(
      session,
      where: (t) =>
          t.id.equals(model.taskId) &
          t.userId.equals(model.userId) &
          t.customerId.equals(model.customerId) &
          t.isDeleted.equals(false),
    );
    if (task == null) {
      throw Exception(
          'Task —Å ID ${model.taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Tag —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    final tag = await Tag.db.findFirstRow(
      session,
      where: (t) =>
          t.id.equals(model.tagId) &
          t.userId.equals(model.userId) &
          t.customerId.equals(model.customerId) &
          t.isDeleted.equals(false),
    );
    if (tag == null) {
      throw Exception(
          'Tag —Å ID ${model.tagId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    }
  }

  Future<TaskTagMap> createTaskTagMap(
      Session session, TaskTagMap taskTagMap) async {
    final authContext = await getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    final taskId = taskTagMap.taskId;
    final tagId = taskTagMap.tagId;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await _validateTaskAndTag(session, taskTagMap);

    return await session.db.transaction((transaction) async {
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ) –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      final existingRelation = await TaskTagMap.db.findFirstRow(
        session,
        where: (r) =>
            r.taskId.equals(taskId) &
            r.tagId.equals(tagId) &
            r.userId.equals(userId) & r.customerId.equals(customerId)            ,
        transaction: transaction,
      );

      final now = DateTime.now().toUtc();
      TaskTagMap result;

      if (existingRelation != null) {
        if (!existingRelation.isDeleted) {
          // –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
          session.log('‚ÑπÔ∏è –°–≤—è–∑—å Task($taskId) ‚Üî Tag($tagId) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
          return existingRelation;
        }

        // "–í–æ—Å–∫—Ä–µ—à–∞–µ–º" —É–¥–∞–ª–µ–Ω–Ω—É—é —Å–≤—è–∑—å
        session
            .log('‚ÑπÔ∏è –í–æ—Å–∫—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é —Å–≤—è–∑—å Task($taskId) ‚Üî Tag($tagId)');
        result = await TaskTagMap.db.updateRow(
          session,
          existingRelation.copyWith(isDeleted: false, lastModified: now),
          transaction: transaction,
        );

        await _notifyChange(
            session,
            TaskTagMapSyncEvent(
              type: SyncEventType.update,
              taskTagMap: result,
            ),
            authContext);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
        result = await TaskTagMap.db.insertRow(
          session,
          TaskTagMap(
            taskId: taskId,
            tagId: tagId,
            userId: userId,
            customerId: taskTagMap.customerId,
            createdAt: taskTagMap.createdAt,
            lastModified: DateTime.now().toUtc(),
            isDeleted: false,
          ),
          transaction: transaction,
        );

        await _notifyChange(
            session,
            TaskTagMapSyncEvent(
              type: SyncEventType.create,
              taskTagMap: result,
            ),
            authContext);
      }

      session.log(
          '‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å Task($taskId) ‚Üî Tag($tagId) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
      return result;
    });
  }
  
  Future<bool> deleteTaskTagMapById(Session session, UuidValue id) async {
    final authContext = await getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    return await session.db.transaction((transaction) async {
        final relation = await TaskTagMap.db.findFirstRow(
            session,
            where: (r) => r.id.equals(id) & r.userId.equals(userId) & r.customerId.equals(customerId) & r.isDeleted.equals(false),
            transaction: transaction,
        );

        if (relation == null) {
            session.log('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω—É—é —Å–≤—è–∑—å TaskTagMap —Å ID: $id');
            return false;
        }

        // "–ú—è–≥–∫–æ–µ" —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏
        final tombstone = relation.copyWith(
            isDeleted: true,
            lastModified: DateTime.now().toUtc(),
        );

        final result = await TaskTagMap.db.updateRow(session, tombstone, transaction: transaction);

        await _notifyChange(session, TaskTagMapSyncEvent(
            type: SyncEventType.delete,
            taskTagMap: result,
            id: id,
        ), authContext);

        session.log('‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å TaskTagMap —Å ID: $id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
        return true;
    });
  }

  Future<List<Tag>> getTagsForTask(Session session, UuidValue taskId) async {
    final authContext = await getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;


    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    final task = await Task.db.findFirstRow(
      session,
      where: (t) => t.id.equals(taskId) & t.userId.equals(userId) & t.customerId.equals(customerId) & t.isDeleted.equals(false),
    );
    
    if (task == null) {
      throw Exception('Task —Å ID $taskId –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    }

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ —Å–≤—è–∑—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
    final taskTagMaps = await TaskTagMap.db.find(
      session,
      where: (ttm) => ttm.taskId.equals(taskId) & 
                      ttm.userId.equals(userId) & 
                      ttm.customerId.equals(customerId) & 
                      ttm.isDeleted.equals(false),
    );

    if (taskTagMaps.isEmpty) {
      return [];
    }

    final tagIds = taskTagMaps.map((ttm) => ttm.tagId).toSet();

    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–∏ —Ç–µ–≥–∏
    return await Tag.db.find(
      session,
      where: (t) => t.id.inSet(tagIds) & 
                    t.userId.equals(userId) & 
                    t.customerId.equals(customerId) & 
                    t.isDeleted.equals(false),
      orderBy: (t) => t.title,
    );
  }

  Future<List<Task>> getTasksForTag(Session session, UuidValue tagId) async {
    final authContext = await getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    final tag = await Tag.db.findFirstRow(
      session,
      where: (t) => t.id.equals(tagId) & t.userId.equals(userId) & t.customerId.equals(customerId) & t.isDeleted.equals(false),
    );
    
    if (tag == null) {
      throw Exception('Tag —Å ID $tagId –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ —Å–≤—è–∑—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
    final taskTagMaps = await TaskTagMap.db.find(
      session,
      where: (ttm) => ttm.tagId.equals(tagId) & 
                      ttm.userId.equals(userId) & 
                      ttm.customerId.equals(customerId) & 
                      ttm.isDeleted.equals(false),
    );

    if (taskTagMaps.isEmpty) {
      return [];
    }

    final taskIds = taskTagMaps.map((ttm) => ttm.taskId).toSet();

    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–∏ –∑–∞–¥–∞—á–∏
    return await Task.db.find(
      session,
      where: (t) => t.id.inSet(taskIds) & 
                    t.userId.equals(userId) & 
                    t.customerId.equals(customerId) & 
                    t.isDeleted.equals(false),
      orderBy: (t) => t.title,
    );
  }

  Future<List<TaskTagMap>> getTaskTagMapsSince(Session session, DateTime? since) async {
    final authContext = await getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;
    
    return await TaskTagMap.db.find(
      session,
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ), –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–æ—Å–ª–µ 'since'
      where: (r) => r.userId.equals(userId) & r.customerId.equals(customerId) & (since == null ? Constant.bool(true) : r.lastModified >= since),
      orderBy: (r) => r.lastModified,
    );
  }

  Stream<TaskTagMapSyncEvent> watchEvents(Session session) async* {
    final authContext = await getAuthenticatedUserContext(session);
  final userId = authContext.userId;
  final customerId = authContext.customerId;
    
    // final channel = '$_taskTagMapChannelBase$userId';
      final channel = '$_taskTagMapChannelBase$userId-${customerId.uuid}';
    session.log('üü¢ –ö–ª–∏–µ–Ω—Ç (user: $userId) –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è TaskTagMap –≤ –∫–∞–Ω–∞–ª–µ "$channel"');

    try {
      await for (var event in session.messages.createStream<TaskTagMapSyncEvent>(channel)) {
        session.log('üîÑ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ TaskTagMap ${event.type.name} –∫–ª–∏–µ–Ω—Ç—É (user: $userId)');
        yield event;
      }
    } finally {
      session.log('üî¥ –ö–ª–∏–µ–Ω—Ç (user: $userId) –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ TaskTagMap "$channel"');
    }
  }

Future<bool> deleteTaskTagMapByTaskAndTag(Session session, UuidValue taskId, UuidValue tagId) async {
    final authContext = await getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    return await session.db.transaction((transaction) async {
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–≤—è–∑—å –ø–æ –±–∏–∑–Ω–µ—Å-–∫–ª—é—á—É
        final relation = await TaskTagMap.db.findFirstRow(
            session,
            where: (r) => r.taskId.equals(taskId) & r.tagId.equals(tagId) & r.userId.equals(userId) & r.customerId.equals(customerId) & r.isDeleted.equals(false),
            transaction: transaction,
        );

        if (relation == null) {
            session.log('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω—É—é —Å–≤—è–∑—å: Task($taskId) <-> Tag($tagId)');
            return false; // –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π.
        }

        // "–ú—è–≥–∫–æ–µ" —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏
        final tombstone = relation.copyWith(
            isDeleted: true,
            lastModified: DateTime.now().toUtc(),
        );

        final result = await TaskTagMap.db.updateRow(session, tombstone, transaction: transaction);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–π ID, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∏ –∑–Ω–∞—é—Ç (–∏–ª–∏ –ø–æ–ª—É—á–∞—Ç)
        await _notifyChange(session, TaskTagMapSyncEvent(
            type: SyncEventType.delete,
            id: result.id, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            taskTagMap: result,
        ), authContext);

        session.log('‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å Task($taskId) <-> Tag($tagId) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
        return true;
    });
  }


}