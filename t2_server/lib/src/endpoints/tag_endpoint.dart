// lib/features/home/data/datasources/remote/sources/tag_endpoint.dart
import 'package:serverpod/serverpod.dart';
import 'package:t2_server/src/generated/protocol.dart'; // –í–∫–ª—é—á–∞–µ—Ç UserSessionData, CustomerUser

const _tagChannelBase = 't2_tag_events_for_user_';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º Record Type –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ userId –∏ customerId
typedef AuthenticatedUserContext = ({int userId, UuidValue customerId /*, List<String> activePermissions */}); // activePermissions, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö

class TagEndpoint extends Endpoint {
  
  Future<AuthenticatedUserContext> _getAuthenticatedUserContext(Session session) async {
    final authInfo = await session.authenticated;
    final userId = authInfo?.userId;

    if (userId == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.');
    }

    final customerUser = await CustomerUser.db.findFirstRow(
      session,
      where: (cu) => cu.userId.equals(userId),
    );

    if (customerUser == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∏–µ–Ω—Ç—É (Customer).');
    }

    // –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã activePermissions –∑–¥–µ—Å—å, —Ç–æ –∏—Ö —Ç–æ–∂–µ –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ DB:
    // final rolePermissions = await RolePermission.db.find(session, where: (rp) => rp.roleId.equals(customerUser.roleId));
    // final permissionKeys = <String>{};
    // for (var rp in rolePermissions) {
    //   final permission = await Permission.db.findById(session, rp.permissionId);
    //   if (permission != null) { permissionKeys.add(permission.key); }
    // }
    // return (userId: userId, customerId: customerUser.customerId, activePermissions: permissionKeys.toList());

    return (userId: userId, customerId: customerUser.customerId);
  }

  // –ú–µ—Ç–æ–¥ _notifyChange —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç AuthenticatedUserContext
  Future<void> _notifyChange(Session session, TagSyncEvent event, AuthenticatedUserContext authContext) async { // –ò–ó–ú–ï–ù–ï–ù–û
    final channel = '$_tagChannelBase${authContext.userId}-${authContext.customerId.uuid}'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º authContext
    await session.messages.postMessage(channel, event);
    session.log('üîî –°–æ–±—ã—Ç–∏–µ ${event.type.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª "$channel"');
  }

  Future<Tag> createTag(Session session, Tag tag) async {
    final authContext = await _getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    final existingTag = await Tag.db.findFirstRow(
      session,
      where: (c) => c.id.equals(tag.id) & c.userId.equals(userId) & c.customerId.equals(customerId),
    );

    final serverTag = tag.copyWith(
        userId: userId,
        customerId: customerId,
        lastModified: DateTime.now().toUtc(),
        isDeleted: false,
    );

    if (existingTag != null) {
      session.log('‚ÑπÔ∏è "createTag" –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ).');
      final updatedTag = await Tag.db.updateRow(session, serverTag);

      await _notifyChange(session, TagSyncEvent(
          type: SyncEventType.update, 
          tag: updatedTag,
      ), authContext); // –ò–ó–ú–ï–ù–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º authContext
      return updatedTag;

    } else {
      final createdTag = await Tag.db.insertRow(session, serverTag);
      await _notifyChange(session, TagSyncEvent(
          type: SyncEventType.create,
          tag: createdTag,
      ), authContext); // –ò–ó–ú–ï–ù–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º authContext
      return createdTag;
    }
  }

  Future<List<Tag>> getTags(Session session, {int? limit}) async {
    final authContext = await _getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    return await Tag.db.find(
      session,
      where: (c) => c.userId.equals(userId) & c.customerId.equals(customerId) & c.isDeleted.equals(false),
      limit: limit
    );
  }     

  Future<Tag?> getTagById(Session session, UuidValue id) async {
    final authContext = await _getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;
    
    return await Tag.db.findFirstRow(
      session,
      where: (c) => c.id.equals(id) & c.userId.equals(userId) & c.customerId.equals(customerId) & c.isDeleted.equals(false),
    );
  }

  Future<List<Tag>> getTagsSince(Session session, DateTime? since) async {
    final authContext = await _getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    if (since == null) {
      return getTags(session);
    }
    return await Tag.db.find(
      session,
      where: (c) => c.userId.equals(userId) & c.customerId.equals(customerId) & (c.lastModified >= since),
      orderBy: (c) => c.lastModified,
    );
  }

  Future<bool> updateTag(Session session, Tag tag) async {
    final authContext = await _getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    final originalTag = await Tag.db.findFirstRow(
      session,
      where: (c) => c.id.equals(tag.id) & c.userId.equals(userId) & c.customerId.equals(customerId) & c.isDeleted.equals(false),
    );
    if (originalTag == null) {
      return false; 
    }
    final serverTag = tag.copyWith(
      userId: userId,
      customerId: customerId,
      lastModified: DateTime.now().toUtc(),
    );
    try {
      await Tag.db.updateRow(session, serverTag);
      await _notifyChange(session, TagSyncEvent(
        type: SyncEventType.update,
        tag: serverTag,
      ), authContext); // –ò–ó–ú–ï–ù–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º authContext
      return true;
    } catch (e) {
      return false;
    }
  }

  Future<bool> deleteTag(Session session, UuidValue id) async {
    final authContext = await _getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    final originalTag = await Tag.db.findFirstRow(
      session,
      where: (c) => c.id.equals(id) & c.userId.equals(userId) & c.customerId.equals(customerId),
    );

    if (originalTag == null) return false;
    final tombstone = originalTag.copyWith(
      isDeleted: true,
      lastModified: DateTime.now().toUtc(),
    );

    final result = await Tag.db.updateRow(session, tombstone);

    await _notifyChange(session, TagSyncEvent(
      type: SyncEventType.delete,
      tag: result, 
      id: id,
    ), authContext); // –ò–ó–ú–ï–ù–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º authContext

    return true;
  }

  Stream<TagSyncEvent> watchEvents(Session session) async* {
    final authContext = await _getAuthenticatedUserContext(session);
    final userId = authContext.userId;
    final customerId = authContext.customerId;

    final channel = '$_tagChannelBase$userId-${customerId.uuid}'; 
    session.log('üü¢ –ö–ª–∏–µ–Ω—Ç (user: $userId, customer: ${customerId.uuid}) –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–Ω–∞–ª–µ "$channel"');
    try {
      await for (var event in session.messages.createStream<TagSyncEvent>(channel)) {
        session.log('üîÑ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ ${event.type.name} –∫–ª–∏–µ–Ω—Ç—É (user: $userId, customer: ${customerId.uuid})');
        yield event;
      }
    } finally {
      session.log('üî¥ –ö–ª–∏–µ–Ω—Ç (user: $userId, customer: ${customerId.uuid}) –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ "$channel"');
    }
  }
  
}