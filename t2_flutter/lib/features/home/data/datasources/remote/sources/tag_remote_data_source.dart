import 'dart:async';
import 'package:t2_client/t2_client.dart';
import '../interfaces/tag_remote_datasource_service.dart';

class TagRemoteDataSource implements ITagRemoteDataSource {
  final Client _client;

  TagRemoteDataSource(this._client);

  @override
  Future<List<Tag>> getTags() async {
    try {
      final tags = await _client.tag.getTags();
      return tags;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  @override
  Future<List<Tag>> getTagsSince(DateTime? since) async {
    try {
      final tags = await _client.tag.getTagsSince(since);
      return tags;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è c $since: $e');
      rethrow;
    }
  }

  @override
  Future<Tag?> getTagById(UuidValue id) async {
    try {
      final tag = await _client.tag.getTagById(id);
      return tag;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ ID $id: $e');
      rethrow;
    }
  }

  @override
  Future<Tag> createTag(Tag tag) async {
    print('üöÄ Remote: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${_client.host}');

    try {
      final result = await _client.tag.createTag(tag);
      print('‚úÖ Remote: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      return result;
    } catch (e) {
      print('‚ùå Remote: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
      rethrow;
    }
  }

  @override
  Future<bool> updateTag(Tag tag) async {
    try {
      final result = await _client.tag.updateTag(tag);
      return result;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  @override
  Future<bool> deleteTag(UuidValue id) async {
    try {
      final result = await _client.tag.deleteTag(id);
      return result;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è $id: $e');
      rethrow;
    }
  }

  @override
  Stream<TagSyncEvent> watchEvents() {
    try {
      return _client.tag.watchEvents();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞: $e');
      return Stream.value(TagSyncEvent(type: SyncEventType.create));
    }
  }

  @override
  Future<bool> checkConnection() async {
    try {
      await _client.tag.getTags(limit: 1);
      return true;
    } catch (e) {
      print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: $e');
      return false;
    }
  }

  @override
  Future<List<Tag>> syncTags(List<Tag> localTags) async {
    try {
      final serverTags = await getTags();

      print(
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ª–æ–∫–∞–ª—å–Ω—ã—Ö ${localTags.length}, —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö ${serverTags.length}',
      );
      return serverTags;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return localTags;
    }
  }


}

