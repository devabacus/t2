
import 'dart:async';
import 'package:t2_client/t2_client.dart';
import '../interfaces/task_tag_map_remote_datasource_service.dart';

class TaskTagMapRemoteDataSource implements ITaskTagMapRemoteDataSource {
  final Client _client;
  TaskTagMapRemoteDataSource(this._client);

  @override
  Future<List<TaskTagMap>> getTaskTagMapsSince(DateTime? since) async {
    try {
      return await _client.taskTagMap.getTaskTagMapsSince(since);
    } catch (e) {
      print('‚ùå TaskTagMapRemoteDataSource.getTaskTagMapsSince: $e');
      rethrow;
    }
  }

  @override
  Stream<TaskTagMapSyncEvent> watchEvents() {
    try {
      return _client.taskTagMap.watchEvents();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è TaskTagMap: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–∏–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–∞–¥–∞–ª–æ
      return Stream.value(TaskTagMapSyncEvent(type: SyncEventType.create));
    }
  }
  
  @override
  Future<bool> checkConnection() async {
    try {
      await getTaskTagMapsSince(DateTime.now().subtract(const Duration(seconds: 1)));
      return true;
    } catch (e) {
      print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TaskTagMap –Ω–µ—É–¥–∞—á–Ω–∞: $e');
      return false;
    }
  }

  @override
  Future<TaskTagMap> createTaskTagMap(taskTagMap) async {
    try {
      print('üöÄ Remote: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ Task-Tag');
      final result = await _client.taskTagMap.createTaskTagMap(taskTagMap);
      print('‚úÖ Remote: –°–≤—è–∑—å Task-Tag —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      return result;
    } catch (e) {
      print('‚ùå Remote: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ Task-Tag –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
      rethrow;
    }
  }
  
  @override
  Future<bool> deleteTaskTagMapById(UuidValue id) async {
    try {
      return await _client.taskTagMap.deleteTaskTagMapById(id);
    } catch (e) {
      print('‚ùå Remote: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ Task-Tag –ø–æ ID $id: $e');
      rethrow;
    }
  }

  @override
  Future<List<Tag>> getTagsForTask(UuidValue taskId) async {
    try {
      return await _client.taskTagMap.getTagsForTask(taskId);
    } catch (e) {
      print('‚ùå Remote: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ $taskId: $e');
      rethrow;
    }
  }

  @override
  Future<List<Task>> getTasksForTag(UuidValue tagId) async {
    try {
      return await _client.taskTagMap.getTasksForTag(tagId);
    } catch (e) {
      print('‚ùå Remote: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è —Ç–µ–≥–∞ $tagId: $e');
      rethrow;
    }
  }

 @override
  Future<bool> deleteTaskTagMapByTaskAndTag(UuidValue taskId, UuidValue tagId) async {
    try {
      return await _client.taskTagMap.deleteTaskTagMapByTaskAndTag(taskId, tagId);
    } catch (e) {
      print('‚ùå Remote: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ –ø–æ Task/Tag ID: $e');
      rethrow;
    }
  }

}